import AsyncStorage from '@react-native-async-storage/async-storage';
const CUR='current_program_v1';const SAVED='saved_programs_v1';
export async function getCurrentProgram(){try{const r=await AsyncStorage.getItem(CUR);return r?JSON.parse(r):null}catch(e){return null}}
export async function setCurrentProgram(x){try{await AsyncStorage.setItem(CUR,JSON.stringify(x))}catch(e){}}
export async function clearCurrentProgram(){try{await AsyncStorage.removeItem(CUR)}catch(e){}}
async function getSaved(){try{const r=await AsyncStorage.getItem(SAVED);return r?JSON.parse(r):[]}catch(e){return[]}}
export async function ensureCurrentOnStart({programId,programName,week,day}){if(!programId)return;try{const cur=await getCurrentProgram();if(!cur||cur.programId!==programId){await setCurrentProgram({programId,programName,week,day,status:'in_progress',updatedAt:Date.now()})}else{await setCurrentProgram({...cur,programName:programName||cur.programName,week:week||cur.week,day:day||cur.day,status:'in_progress',updatedAt:Date.now()})}}catch(e){}}
export async function advanceCurrentProgram(){const cur=await getCurrentProgram();if(!cur||!cur.programId){return}const saved=await getSaved();const prog=saved.find(p=>p.id===cur.programId);if(!prog||!prog.plan){await clearCurrentProgram();return}let w=Number(cur.week||1);let d=Number(cur.day||1);const hasDay=(wk,dy)=>{const pw=prog.plan||{};return pw[wk]&&pw[wk][dy]&&Array.isArray(pw[wk][dy])&&pw[wk][dy].length>0};let nw=w,nd=d+1;if(hasDay(nw,nd)){await setCurrentProgram({programId:cur.programId,programName:cur.programName,week:nw,day:nd,status:'ready',updatedAt:Date.now()});return}nw=w+1;nd=1;while(prog.plan&&prog.plan[nw]&&!hasDay(nw,nd)){const keys=Object.keys(prog.plan[nw]||{}).map(n=>Number(n)).sort((a,b)=>a-b);if(keys.length){nd=keys[0];break}else{nw++}}if(hasDay(nw,nd)){await setCurrentProgram({programId:cur.programId,programName:cur.programName,week:nw,day:nd,status:'ready',updatedAt:Date.now()});return}await clearCurrentProgram()}
export async function stopProgram(programId){const cur=await getCurrentProgram();if(cur&&(!programId||cur.programId===programId)){await clearCurrentProgram();return true}return false}
export async function startProgramNow(programId){const saved=await getSaved();const prog=saved.find(p=>p.id===programId);if(!prog)return null;let week=1;let day=1;const weeks=Object.keys(prog.plan||{}).map(n=>Number(n)).sort((a,b)=>a-b);if(weeks.length){week=weeks[0];const days=Object.keys((prog.plan||{})[week]||{}).map(n=>Number(n)).sort((a,b)=>a-b);if(days.length)day=days[0]}await setCurrentProgram({programId,programName:prog.name||'Program',week,day,status:'ready',updatedAt:Date.now()});return{programId,programName:prog.name||'Program',week,day}
}
